{"name":"Quad Curve Menu","tagline":"Path 2.0 menu (configurable, extendable, and composable)","body":"QuadCurveMenu is a menu with the same look as [the Path app's menu](https://path.com/)'s story menu.\r\n\r\n![expand](https://dl.dropbox.com/u/1235674/quadcurve-expand.gif)\r\n![custom-expand](https://dl.dropbox.com/u/1235674/quadcurve-custom-expand.gif)\r\n![custom-selection](https://dl.dropbox.com/u/1235674/quadcurve-custom-selection.gif)\r\n![expand-linear](https://dl.dropbox.com/u/1235674/quadcurve-linear.gif)\r\n\r\nThis is a fork of [levey's AwesomeMenu](https://github.com/levey/AwesomeMenu). I proposed a pull request and this was not what the original author had intended to create. This fork has some notable differences that I outline in the [pull request](https://github.com/levey/AwesomeMenu/pull/15):\r\n\r\n> I really love the menu and wanted to use any data source (not just an array), more touch events, and the ability to manipulate the images and animations. I also wanted the menu items to be able to hold some data object that I could store and retrieve on selection instead of relying on an index.\r\n\r\nUltimately this is a much more modular library that allows you to define new functionality for the menu without having to rip the guts out of the existing one.\r\n\r\n* Componentized into multiple files\r\n\r\n> QuadCurveMenu is defined in multiple files to separate concerns and make it easier to maintain and the code clearer. This does increase the burden when the code is included in a project.\r\n\r\n* Converted project to ARC\r\n\r\n* AppDelegate in the example is no longer responsible for the menu and an example view controller was created.\r\n\r\n* Menu will generate delegate events for `willExpand`, `didExpand`,\r\n`willClose`, and `didClose`.\r\n\r\n* Menu will ask a delegate `shouldExpand` before expanding and `shouldClose` before closing\r\n\r\n* Menu will generate events for tap (`didTapMenu`) and long press (`didLongPressMenu`)\r\n\r\n* Menu is populated from a Data Source Delegate\r\n\r\n* Menu is designed by a MenuItemFactory\r\n\r\n* Menu is composed with individual, definable animations for expand, close, selected, unselected\r\n\r\n* Menu animations are now in their own separate classes\r\n\r\n* Menu can display menu items with a Radial, Linear or custom style\r\n\r\n* Menu items will generate events for tap (`didTapMenuItem`) and long press (`didLongPressMenuItem`)\r\n\r\n* Menu items are automatically medallionized (AGMedallionView) so custom *medallionized* images\r\n  do not have to be created.\r\n\r\n* Menu items are designed by a MenuItemFactory\r\n\r\n* Menu items contain a dataObject\r\n\r\n## Getting Started\r\n\r\n### Default Usage\r\n\r\nQuadCurveMenu defines a simple initializer that generates\r\na radial menu, 360 degrees, centered within the given frame\r\nshowing menu items for each element in the provided array.\r\n\r\n```objc\r\n@implementation AwesomeViewController\r\n\r\n- (void)viewDidLoad {\r\n  [super viewDidLoad]\r\n\r\n  NSArray *menuItemArray = [NSArray arrayWithObjects:@\"1\",@\"2\",nil];\r\n\r\n  QuadCurveMenu *menu = [[QuadCurveMenu alloc] initWithFrame:self.view.bounds withArray:menuItemArray];\r\n\r\n  [self.view addSubview:menu];\r\n}\r\n\r\n@end\r\n```\r\n\r\n### Custom Data Source\r\n\r\nYou may find an NSArray limiting so the menu can be defined with\r\na custom data source.\r\n\r\nFirst you define a data source, or have an existing data source,\r\nthat adheres to the `QuadCurveDataSourceDelegate` protocol.\r\n\r\n> By default when you use the array implementation it uses a `QuadCurveDefaultDataSource`\r\n> which simply wraps an NSArray.\r\n\r\n```objc\r\n@interface AwesomeDataSource : NSObject <QuadCurveDataSourceDelegate> {\r\n    NSMutableArray *dataItems;\r\n}\r\n@end\r\n\r\n@implementation AwesomeDataSource\r\n\r\n- (id)init {\r\n    self = [super init];\r\n    if (self) {\r\n        dataItems = [NSMutableArray arrayWithObjects:@\"1\",@\"2\",@\"3\",@\"4\",@\"5\",@\"6\", nil];\r\n    }\r\n    return self;\r\n}\r\n\r\n#pragma mark - QuadCurveDataSourceDelegate Adherence\r\n\r\n- (int)numberOfMenuItems {\r\n    return [dataItems count];\r\n}\r\n\r\n- (id)dataObjectAtIndex:(NSInteger)itemIndex {\r\n    return [dataItems objectAtIndex:itemIndex];\r\n}\r\n```\r\n\r\nCreating a QuadCurveMenu with a custom data source:\r\n\r\n```objc\r\n@implementation AwesomeViewController\r\n\r\n- (void)viewDidLoad {\r\n  [super viewDidLoad]\r\n\r\n  AwesomeDataSource *dataSource = [[AwesomeDataSource alloc] init];\r\n\r\n  QuadCurveMenu *menu = [[QuadCurveMenu alloc] initWithFrame:self.view.bounds dataSource:dataSource];\r\n\r\n  [self.view addSubview:menu];\r\n}\r\n\r\n@end\r\n```\r\n\r\n### Event Delegate\r\n\r\nSetup a delegate object, this will usually be the view controller showing the\r\nQuadCurveMenu, that adheres to the `QuadCurveMenuDelegate` protocol.\r\n\r\n```objc\r\n@interface AwesomeViewController : UIViewController <QuadCurveMenuDelegate>\r\n\r\n@end\r\n\r\n@implementation AwesomeViewController\r\n\r\n- (void)viewDidLoad {\r\n  [super viewDidLoad]\r\n\r\n  AwesomeDataSource *dataSource = [[AwesomeDataSource alloc] init];\r\n\r\n  QuadCurveMenu *menu = [[QuadCurveMenu alloc] initWithFrame:self.view.bounds dataSource:dataSource];\r\n\r\n  menu.delegate = self;\r\n\r\n  [self.view addSubview:menu];\r\n}\r\n\r\n- (void)quadCurveMenu:(QuadCurveMenu *)menu didTapMenu:(QuadCurveMenuItem *)mainMenuItem {\r\n    NSLog(@\"Menu - Tapped\");\r\n}\r\n\r\n- (void)quadCurveMenu:(QuadCurveMenu *)menu didLongPressMenu:(QuadCurveMenuItem *)mainMenuItem {\r\n    NSLog(@\"Menu - Long Pressed\");\r\n}\r\n\r\n- (void)quadCurveMenu:(QuadCurveMenu *)menu didTapMenuItem:(QuadCurveMenuItem *)menuItem {\r\n    NSLog(@\"Menu Item (%@) - Tapped\",menuItem.dataObject);\r\n}\r\n\r\n- (void)quadCurveMenu:(QuadCurveMenu *)menu didLongPressMenuItem:(QuadCurveMenuItem *)menuItem {\r\n    NSLog(@\"Menu Item (%@) - Long Pressed\",menuItem.dataObject);\r\n}\r\n\r\n- (void)quadCurveMenuWillExpand:(QuadCurveMenu *)menu {\r\n    NSLog(@\"Menu - Will Expand\");\r\n}\r\n\r\n- (void)quadCurveMenuDidExpand:(QuadCurveMenu *)menu {\r\n    NSLog(@\"Menu - Did Expand\");\r\n}\r\n\r\n- (void)quadCurveMenuWillClose:(QuadCurveMenu *)menu {\r\n    NSLog(@\"Menu - Will Close\");\r\n}\r\n\r\n- (void)quadCurveMenuDidClose:(QuadCurveMenu *)menu {\r\n    NSLog(@\"Menu - Did Close\");\r\n}\r\n\r\n- (BOOL)quadCurveMenuShouldClose:(QuadCurveMenu *)menu {\r\n    // Returning YES will allow the menu to close; NO to prevent it from closing.\r\n    return YES;\r\n}\r\n\r\n- (BOOL)quadCurveMenuShouldExpand:(QuadCurveMenu *)menu {\r\n    // Returning YES will allow the menu to expand; NO to prevent it from expanding.\r\n    return YES;\r\n}\r\n\r\n@end\r\n```\r\n\r\n### Custom Menu Images and Menu Item Images\r\n\r\nYou can configure the look of the center, main menu item, and the menu items\r\nthat appear from the main menu.\r\n\r\n> By default the QuadCurveMenu uses ```[QuadCurveDefaultMenuItemFactory defaultMainMenuItemFactory]```\r\n> for the main menu and ```[QuadCurveDefaultMenuItemFactory defaultMenuItemFactory]``` for each menu item.\r\n> These are defined to look like the path application.\r\n\r\nYou can define customized instances of `QuadCurveDefaultMenuItemFactory`:\r\n\r\n```objc\r\n@implementation AwesomeViewController\r\n\r\n- (void)viewDidLoad {\r\n  [super viewDidLoad]\r\n\r\n  AwesomeDataSource *dataSource = [[AwesomeDataSource alloc] init];\r\n\r\n  QuadCurveMenu *menu = [[QuadCurveMenu alloc] initWithFrame:self.view.bounds dataSource:dataSource];\r\n\r\n  menu.delegate = self;\r\n\r\n  // Use a facebook center button for the menu\r\n\r\n  [menu setMainMenuItemFactory:[[QuadCurveDefaultMenuItemFactory alloc] initWithImage:[UIImage imageNamed:@\"facebook.png\"] highlightImage:[UIImage imageNamed:nil]]];\r\n\r\n  // Use an unknown user button for the menu items\r\n\r\n  [menu setMenuItemFactory:[[QuadCurveDefaultMenuItemFactory alloc] initWithImage:[UIImage imageNamed:@\"unknown-user.png\"] highlightImage:[UIImage imageNamed:nil]]];\r\n\r\n  [self.view addSubview:menu];\r\n}\r\n```\r\n\r\nYou can also define your own object that adheres to the protocol `QuadCurveMenuItemFactory`.\r\n\r\n```objc\r\n#pragma mark - QuadCurveMenuItemFactory Adherence\r\n\r\n- (QuadCurveMenuItem *)createMenuItemWithDataObject:(id)dataObject {\r\n\r\n    QuadCurveMenuItem *item = [[QuadCurveMenuItem alloc] initWithImage:image\r\n                                                      highlightedImage:highlightImage\r\n                                                          contentImage:contentImage\r\n                                               highlightedContentImage:highlightContentImage];\r\n\r\n    [item setDataObject:dataObject];\r\n\r\n    return item;\r\n}\r\n```\r\n\r\n### Custom Menu Directions\r\n\r\nBy default QuadCurveMenu displays in a 360 degree radial menu.\r\nThis can be customized by confuring an existing menu directory\r\nor defining a custom `QuadCurveMotionDirector`\r\n\r\n> This is a departure from the original source which defined a number of attributes on the\r\n> menu which controlled the layout.\r\n\r\n#### QuadCurveRadialDirector\r\n\r\nYou can define a a custom radial director with the options:\r\n\r\n* `rotateAngle` - initial starting angle of the menu (default: 0 degrees)\r\n* `menuWholeAngle` - the total available angle that the menu items will be displayed (default: 360 degrees)\r\n\r\n* `endRadius` - the final distance from the main menu center (where the menu items will sit)\r\n* `nearRadius` - the closest distance from the main menu center that the menu items will travel\r\n* `farRadius` - the furthest distance from the main menu center that the menu items will travel\r\n\r\n#### QuadCurveLinearDirector\r\n\r\nYou can define a custom linear director with the options:\r\n\r\n* `angle` - the angle at which to display the menu items\r\n* `padding` - the space between each menu item\r\n\r\n#### Custom QuadCurveMotionDirector\r\n\r\nIf a radial or linear layout is not powerful enough, you can define\r\na custom director that adheres to the `QuadCurveMotionDirector` interface:\r\n\r\n```objc\r\n@protocol QuadCurveMotionDirector <NSObject>\r\n\r\n- (void)positionMenuItem:(QuadCurveMenuItem *)item\r\n                 atIndex:(int)index\r\n                 ofCount:(int)count\r\n                fromMenu:(QuadCurveMenuItem *)mainMenuItem;\r\n\r\n@end\r\n```\r\n\r\n### Custom Animations\r\n\r\nSeveral of the animations are customizable through properties. Viewing the\r\nexample project you should see an __Animations__ group which contains the\r\ndefault animations used in the application. You can customize them there or\r\ndefine your own and set them through properties on the `QuadCurveMenu`.\r\n\r\nHere is an example of swapping the default _selected_ and _unselected_\r\nanimations:\r\n\r\n```objc\r\nmenu.selectedAnimation = [[QuadCurveShrinkAnimation alloc] init]\r\nmenu.unselectedanimation = [[QuadCurveBlowupAnimation alloc] init]\r\n```\r\n\r\nAn animation is an object that adheres to the protocol `QuadCurveAnimation`.\r\n\r\n```objc\r\n- (NSString *)animationName {\r\n    return @\"blowup\";\r\n}\r\n\r\n- (CAAnimationGroup *)animationForItem:(QuadCurveMenuItem *)item {\r\n\r\n    CGPoint point = item.center;\r\n\r\n    CAKeyframeAnimation *positionAnimation = [CAKeyframeAnimation animationWithKeyPath:@\"position\"];\r\n    positionAnimation.values = [NSArray arrayWithObjects:[NSValue valueWithCGPoint:point], nil];\r\n    positionAnimation.keyTimes = [NSArray arrayWithObjects: [NSNumber numberWithFloat:.3], nil];\r\n\r\n    CABasicAnimation *scaleAnimation = [CABasicAnimation animationWithKeyPath:@\"transform\"];\r\n    scaleAnimation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeScale(3, 3, 1)];\r\n\r\n    CABasicAnimation *opacityAnimation = [CABasicAnimation animationWithKeyPath:@\"opacity\"];\r\n    opacityAnimation.toValue  = [NSNumber numberWithFloat:0.0f];\r\n\r\n    CAAnimationGroup *animationgroup = [CAAnimationGroup animation];\r\n    animationgroup.animations = [NSArray arrayWithObjects:positionAnimation, scaleAnimation, opacityAnimation, nil];\r\n    animationgroup.duration = 0.3f;\r\n\r\n    return animationgroup;\r\n\r\n}\r\n```\r\n\r\nThe name is used as the name for the animation within the layer. The animation\r\nitself is called with the `QuadCurveMenuItem` and should return the animation\r\ngroup that will be performed.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}